// Export of update.exe
// Import this in IDA 7.0+ using IDC and after importing structures.h
#include <idc.idc>
static main() {
    set_name(0x42a000, "parse_argv");
    SetType(0x42a000, "char __usercall x@<al>(UPDATE_PROGRAM_ARGS *parsed_options@<edx>, char **argv@<ecx>, __int16 argc)");
    set_name(0x42a510, "case_equals");
    SetType(0x42a510, "int __usercall x@<eax>(char *a1@<eax>, char *a2@<ecx>)");
    set_name(0x42a570, "get_error_message");
    set_name(0x42a5b0, "locate_flash_payload_in_file");
    SetType(0x42a5b0, "int __usercall x@<eax>(DWORD *payload_size@<edi>, const char *szFileName, _DWORD *payload_start_offset)");
    set_name(0x42a620, "perform_collecting_information__load_PFS_sections");
    SetType(0x42a620, "int __usercall x@<eax>(unsigned int payload_size@<eax>, const char *szFileName, void (__cdecl *pbar_update)(struct FlashUiWinProgressBar *, unsigned int, int, int, int), struct FlashUiWinProgressBar *pbar, unsigned int payload_start_offset)");
    set_name(0x42aa20, "preparing_to_update__put_update_into_flash_packets");
    SetType(0x42aa20, "int __usercall x@<eax>(struct FlashUiWinProgressBar *pbar@<eax>, void (__cdecl *pbar_update)(struct FlashUiWinProgressBar *, unsigned int, int, int, int)@<ebx>, int a3)");
    set_name(0x42aad0, "decode_TPM_flash_update_manifest");
    SetType(0x42aad0, "int __cdecl x()");
    set_name(0x42b500, "query_Dell_FW_for_current_TPM_version");
    SetType(0x42b500, "DWORD __cdecl x()");
    set_name(0x42bc30, "compare_marker");
    SetType(0x42bc30, "char __usercall x@<al>(void *file_marker@<edi>, BYTE *marker_end)");
    set_name(0x42bc80, "locate_flash_payload_in_file_reader");
    SetType(0x42bc80, "char __usercall x@<al>(DWORD *payload_start_offset_@<ecx>, DWORD *payload_size@<edx>, struct EnhancedFileReader *file_reader, _DWORD *a4, DWORD *payload_start_offset, DWORD *payload_end_offset, DWORD *remaining_bytes)");
    set_name(0x42bf90, "load_SMBIOS_table_3__enclosure_chassis_information");
    SetType(0x42bf90, "bool __cdecl x(void *SMBiosTable3)");
    set_name(0x42c020, "show_MessageBox");
    SetType(0x42c020, "int __fastcall x(LPCSTR lpCaption, LPCSTR lpText, UINT uType)");
    set_name(0x42c050, "_WinMain@16");
    SetType(0x42c050, "int __stdcall x(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)");
    set_name(0x42c8a0, "enable_bit_0x40_to_CMOS_register_0x78");
    SetType(0x42c8a0, "DBUTIL_FUNCTIONS *__fastcall x()");
    set_name(0x42c910, "do_reboot");
    SetType(0x42c910, "int __cdecl x()");
    set_name(0x42ca30, "check_power_sources");
    set_name(0x42cb90, "check_battery_level_and_ac");
    SetType(0x42cb90, "int __cdecl x()");
    set_name(0x42cd60, "check_is_admin");
    SetType(0x42cd60, "BOOL __cdecl x()");
    set_name(0x42ce40, "check_Windows_version");
    SetType(0x42ce40, "int __cdecl x()");
    set_name(0x42cf10, "create_global_mutex_for_flashing");
    SetType(0x42cf10, "BOOL __cdecl x()");
    set_name(0x42cf70, "initialize_TPM_port_value_from_SMBios_table_0xDA");
    SetType(0x42cf70, "char __cdecl x()");
    set_name(0x42d080, "call_Dell_firmware_command_with_mem_already_mapped");
    SetType(0x42d080, "DWORD __usercall x@<eax>(struct DELL_FW_COMMAND_BUFFER *buffer@<esi>)");
    set_name(0x42d160, "call_Dell_firmware_command_mapping_physmem");
    SetType(0x42d160, "DWORD __cdecl x(struct DELL_FW_COMMAND_BUFFER *buffer)");
    set_name(0x42d1f0, "show_dialog_box");
    SetType(0x42d1f0, "BOOL __cdecl x()");
    set_name(0x42d230, "DialogFunc");
    SetType(0x42d230, "BOOL __stdcall x(HWND, UINT, WPARAM, LPARAM)");
    set_name(0x42d2d0, "call_Dell_FW_cmd_0_with_parameter_from_SMBIOS_tbl_0xDA_item_0x268__maybe_check_BIOS_password_is_set");
    SetType(0x42d2d0, "char __cdecl x()");
    set_name(0x42d420, "submit_bios_password");
    SetType(0x42d420, "int __cdecl x()");
    set_name(0x42d690, "log::open_file");
    SetType(0x42d690, "void __cdecl x(char *pszCmdline)");
    set_name(0x42d7f0, "log::close");
    SetType(0x42d7f0, "void __cdecl x()");
    set_name(0x42d870, "UiProgressClass_WndProc");
    SetType(0x42d870, "LRESULT __stdcall x(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)");
    set_name(0x42d910, "FlashUiWinProgressBar::register_classes");
    set_name(0x42d9d0, "FlashUiWinProgressBar::create_windows");
    SetType(0x42d9d0, "HWND __usercall x@<eax>(FlashUiWinProgressBar_with_prelude *self@<esi>, const CHAR *pszTitle)");
    set_name(0x42db90, "FlashUiWinProgressBar::delete");
    SetType(0x42db90, "void __cdecl x(struct FlashUiWinProgressBar *self)");
    set_name(0x42dbf0, "FlashUiWinProgressBar::update");
    SetType(0x42dbf0, "void __cdecl x(struct FlashUiWinProgressBar *self, unsigned int a2, int a3, int added, int maximal_position)");
    set_name(0x42dcc0, "FlashUiWinProgressBar::new");
    SetType(0x42dcc0, "struct FlashUiWinProgressBar *__usercall x@<eax>(const char *pszText@<edi>, BYTE have_user_interface)");
    set_name(0x42dd60, "log::printf");
    SetType(0x42dd60, "void x(const char *fmt, ...)");
    set_name(0x42dd90, "replace_password_with_spaces");
    SetType(0x42dd90, "char *__usercall x@<eax>(const char *pszBuffer@<eax>, int a2@<ecx>, unsigned int a3@<ebx>)");
    set_name(0x42de20, "report_windows_event_for_TPM_update");
    SetType(0x42de20, "void __cdecl x(const char *msg, WORD exit_code, char a3, int a4, int a5)");
    set_name(0x42e3a0, "log_error_from_program");
    set_name(0x42e540, "get_AFRW_helpers_on_malloc_memory");
    SetType(0x42e540, "DBUTIL_CONT_MEMORY_AFRW_HELPERS *__cdecl x()");
    set_name(0x42e560, "ALLOC_HANDLE_MEM_FCTS::malloc");
    SetType(0x42e560, "char __cdecl x(WORD *wHandle, void **ptr, unsigned int *psize, unsigned int size)");
    set_name(0x42e5b0, "ALLOC_HANDLE_MEM_FCTS::free");
    set_name(0x42e5d0, "ALLOC_HANDLE_MEM_FCTS::read");
    SetType(0x42e5d0, "char __cdecl x(void *buffer, WORD wHandleToWird, unsigned int phys_addr, DWORD offset, DWORD size)");
    set_name(0x42e600, "ALLOC_HANDLE_MEM_FCTS::write");
    SetType(0x42e600, "char __cdecl x(WORD wHandleToWird, unsigned int phys_addr, DWORD offset, void *buffer, DWORD size)");
    set_name(0x42e630, "VMaR::sub_42E630");
    set_name(0x42e6d0, "VMaR::sub_42E6D0");
    set_name(0x42e750, "VMaR::sub_42E750");
    set_name(0x42e7e0, "VMaR::sub_42E7E0");
    set_name(0x42f040, "VMaR::sub_42F040");
    set_name(0x42f1b0, "VMaR::new");
    set_name(0x42f220, "j__malloc");
    SetType(0x42f220, "void *__cdecl x(size_t)");
    set_name(0x42f230, "j__free");
    SetType(0x42f230, "void __cdecl x(void *)");
    set_name(0x42f240, "ZeroMemory");
    SetType(0x42f240, "void *__cdecl x(void *a1, size_t a2)");
    set_name(0x42f260, "j__memcpy");
    SetType(0x42f260, "void *__cdecl x(void *, const void *, size_t)");
    set_name(0x42f270, "memcmp_");
    SetType(0x42f270, "int __cdecl x(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int size)");
    set_name(0x42f2f0, "get_libc_malloc_free_ptrs");
    SetType(0x42f2f0, "LIBC_MEM_FCTS *__cdecl x()");
    set_name(0x42f300, "EnhancedFileReader::open");
    SetType(0x42f300, "int __cdecl x(EnhancedFileReader *self, const char *szFileName)");
    set_name(0x42f3a0, "EnhancedFileReader::get_opened");
    SetType(0x42f3a0, "struct EnhancedFileReader *__cdecl x(EnhancedFileReader *self)");
    set_name(0x42f3d0, "EnhancedFileReader::get_file_size");
    SetType(0x42f3d0, "DWORD __cdecl x(struct EnhancedFileReader *self)");
    set_name(0x42f400, "EnhancedFileReader::set_position");
    SetType(0x42f400, "BYTE __cdecl x(EnhancedFileReader *self, unsigned int offset, unsigned int size)");
    set_name(0x42f470, "EnhancedFileReader::set_position_to_read_all");
    SetType(0x42f470, "void __cdecl x(EnhancedFileReader *self)");
    set_name(0x42f4c0, "EnhancedFileReader::close");
    SetType(0x42f4c0, "int __cdecl x(struct EnhancedFileReader *self)");
    set_name(0x42f520, "EnhancedFileReader::seek_to_current_file_position");
    SetType(0x42f520, "int __cdecl x(EnhancedFileReader *self)");
    set_name(0x42f580, "EnhancedFileReader::read");
    SetType(0x42f580, "int __cdecl x(EnhancedFileReader *self, void *buffer, unsigned int size, DWORD *size_read)");
    set_name(0x42f630, "EnhancedFileReader::maybe_reset_EOF");
    SetType(0x42f630, "int __cdecl x(EnhancedFileReader *self)");
    set_name(0x42f670, "EnhancedFileReader::delete");
    SetType(0x42f670, "int __cdecl x(struct EnhancedFileReader *self)");
    set_name(0x42f6c0, "EnhancedFileReader::new");
    SetType(0x42f6c0, "struct EnhancedFileReader *__cdecl x()");
    set_name(0x42f770, "SmbiosTableReader::destroy");
    SetType(0x42f770, "void __cdecl x(SmbiosTableReader *self)");
    set_name(0x42f7c0, "SmbiosTableReader::get_count_of_tables");
    SetType(0x42f7c0, "DWORD __cdecl x(struct SmbiosTableReader *self)");
    set_name(0x42f800, "SmbiosTableReader::get_max_size_of_a_table");
    SetType(0x42f800, "DWORD __cdecl x(struct SmbiosTableReader *self)");
    set_name(0x42f840, "SmbiosTableReader::find_table_by_handle_type_idx");
    SetType(0x42f840, "char __cdecl x(SmbiosTableReader *self, WORD wTblHandle, BYTE tblType, BYTE tbl_index_for_type)");
    set_name(0x42f940, "SmbiosTableReader::get_reader_to_current_table");
    SetType(0x42f940, "struct Reader_interface *__cdecl x(struct SmbiosTableReader *self)");
    set_name(0x42f980, "SmbiosTableReader::read_current_table_into_buffer");
    SetType(0x42f980, "char __cdecl x(struct SmbiosTableReader *self, DWORD buffer_size, void *buffer, DWORD *size)");
    set_name(0x42fa40, "SmbiosTableReader::get_SMBIOS_table_DA_info");
    SetType(0x42fa40, "char __cdecl x(SmbiosTableReader *self, WORD kind, struct SMBIOS_table_DA_substructure *buffer)");
    set_name(0x42fba0, "SmbiosTableReader::reset_position");
    SetType(0x42fba0, "char __cdecl x(SmbiosTableReader *self)");
    set_name(0x42fbf0, "SmbiosTableReader::new");
    SetType(0x42fbf0, "SmbiosTableReader *__cdecl x()");
    set_name(0x430780, "MemoryStreamWriter::delete");
    SetType(0x430780, "void __cdecl x(MemoryStreamWriter *self)");
    set_name(0x4307f0, "MemoryStreamWriter::as_writer");
    SetType(0x4307f0, "struct Writer_interface *__cdecl x(MemoryStreamWriter *self)");
    set_name(0x430820, "MemoryStreamWriter::initialize");
    SetType(0x430820, "int __cdecl x(struct Writer_interface *self)");
    set_name(0x430870, "MemoryStreamWriter::write");
    SetType(0x430870, "int __cdecl x(struct Writer_interface *a1, int a2, int a3)");
    set_name(0x430920, "MemoryStreamWriter::stop");
    SetType(0x430920, "int __cdecl x(struct Writer_interface *a1)");
    set_name(0x430960, "MemoryStreamWriter::new");
    SetType(0x430960, "struct MemoryStreamWriter *__cdecl x(struct BufferManager *bufmgr)");
    set_name(0x4309d0, "FlashPacketWriter::delete");
    set_name(0x430a20, "FlashPacketWriter::initialize");
    set_name(0x430a70, "FlashPacketWriter::compute_CRC32_of_current_packetdata");
    SetType(0x430a70, "char __usercall x@<al>(FlashPacketWriter_with_prelude *self@<edi>, DWORD *crc_value)");
    set_name(0x430ae0, "FlashPacketWriter::write_packet_header");
    SetType(0x430ae0, "char __usercall x@<al>(FlashPacketWriter_with_prelude *self@<ecx>, char is_last)");
    set_name(0x430be0, "FlashPacketWriter:write");
    SetType(0x430be0, "int __cdecl x(int a1, void *a2, DWORD a3)");
    set_name(0x430cd0, "FlashPacketWriter::write_packet_header_");
    set_name(0x430d30, "FlashPacketWriter::new");
    SetType(0x430d30, "struct FlashPacketWriter *__cdecl x(struct BufferManager *bufmgr, int a2)");
    set_name(0x430dd0, "decode_PFS_section_version");
    SetType(0x430dd0, "unsigned int __cdecl x(char *buffer, unsigned int buffer_size, char *pszSpec, WORD *pwVersionData)");
    set_name(0x430f20, "MemoryStreamReader::delete");
    SetType(0x430f20, "void __cdecl x(struct MemoryStreamReader *a1)");
    set_name(0x430f70, "MemoryStreamReader::get_inner_memlist");
    SetType(0x430f70, "struct MemoryStream_lists *__cdecl x(struct MemoryStreamReader *a1)");
    set_name(0x430fa0, "MemoryStreamReader::as_reader");
    SetType(0x430fa0, "struct Reader_interface *__cdecl x(struct MemoryStreamReader *self)");
    set_name(0x430fd0, "MemoryStreamReader::get_size");
    SetType(0x430fd0, "DWORD __cdecl x(struct MemoryStreamReader *self)");
    set_name(0x431010, "MemoryStreamReader::set_position_for_reader");
    SetType(0x431010, "char __cdecl x(struct MemoryStreamReader *self, unsigned int position, unsigned int size)");
    set_name(0x431070, "MemoryStreamReader::read_this_memstream");
    SetType(0x431070, "DWORD __cdecl x(struct MemoryStreamReader *a1, struct MemoryStream_lists *a2)");
    set_name(0x4310c0, "nullsub_1");
    set_name(0x4310d0, "MemoryStreamReader::initialize");
    SetType(0x4310d0, "int __cdecl x(struct Reader_interface *reader, void *a2)");
    set_name(0x431110, "MemoryStreamReader::read");
    SetType(0x431110, "int __cdecl x(struct Reader_interface *self, void *buffer, unsigned int size, unsigned int *size_read)");
    set_name(0x4311a0, "MemoryStreamReader::stop");
    SetType(0x4311a0, "int __cdecl x(struct Reader_interface *a1)");
    set_name(0x4311e0, "MemoryStreamReader::new");
    SetType(0x4311e0, "struct MemoryStreamReader *__cdecl x(struct MemoryStream_lists *memstream)");
    set_name(0x431280, "Decompressor::init_and_seek_to_start");
    SetType(0x431280, "int __cdecl x(struct Decompressor *self, void *unused)");
    set_name(0x431310, "Decompressor::read");
    SetType(0x431310, "int __cdecl x(struct Decompressor *self, void *buffer, unsigned int size, unsigned int *size_read)");
    set_name(0x431460, "Decompressor::stop");
    SetType(0x431460, "int __cdecl x(struct Decompressor *self)");
    set_name(0x4314d0, "Decompressor::delete");
    SetType(0x4314d0, "void __cdecl x(struct Decompressor *self)");
    set_name(0x431530, "Decompressor::new");
    SetType(0x431530, "Decompressor *__cdecl x(struct InstrumentedReader *reader)");
    set_name(0x4315f0, "DBUTIL_CONT_MEMORY_AFRW_HELPERS::get_with_physical_memory");
    SetType(0x4315f0, "struct DBUTIL_CONT_MEMORY_AFRW_HELPERS *__cdecl x()");
    set_name(0x431660, "Wird_list_item::construct_and_allocate_mem");
    SetType(0x431660, "struct Wird_list_item *__thiscall x(struct Wird_list_item *this, unsigned int size)");
    set_name(0x4316d0, "Wird__allocate_contmemory");
    SetType(0x4316d0, "char __cdecl x(WORD *wHandleToWird, DWORD *physical_addr_lowu32, unsigned int *aligned_size, unsigned int size)");
    set_name(0x431760, "Wird_list_item::find_by_phys_addr");
    SetType(0x431760, "struct Wird_list_item *__cdecl x(unsigned int phys_addr)");
    set_name(0x4317c0, "Wird__free_contmemory");
    SetType(0x4317c0, "void __cdecl x(WORD wHandleToWird, unsigned int phys_addr)");
    set_name(0x4317f0, "Wird__read_from_contmemory");
    SetType(0x4317f0, "bool __cdecl x(void *buffer, WORD wHandleToWird, unsigned int phys_addr, DWORD offset, DWORD size)");
    set_name(0x431830, "Wird__write_to_contmemory");
    SetType(0x431830, "bool __cdecl x(WORD wHandleToWird, unsigned int phys_addr, DWORD offset, void *buffer, DWORD size)");
    set_name(0x431870, "InstrumentedReader::seek_to_start");
    SetType(0x431870, "int __cdecl x(struct InstrumentedReader *self, void *unused)");
    set_name(0x4318d0, "InstrumentedReader::read");
    SetType(0x4318d0, "int __cdecl x(struct InstrumentedReader *self, void *buffer, unsigned int size, unsigned int *read_size)");
    set_name(0x431940, "InstrumentedReader::stop");
    SetType(0x431940, "int __cdecl x(struct InstrumentedReader *a1)");
    set_name(0x4319a0, "InstrumentedReader::destroy");
    SetType(0x4319a0, "void __cdecl x(struct InstrumentedReader *self)");
    set_name(0x431a30, "InstrumentedReader::new");
    SetType(0x431a30, "struct InstrumentedReader *__cdecl x(struct Reader_interface *inner_reader, unsigned int size, void (__cdecl *pbar_update)(struct FlashUiWinProgressBar *, unsigned int, int, int, int), struct FlashUiWinProgressBar *pbar)");
    set_name(0x431aa0, "MemoryStreamWriter_lists::new");
    SetType(0x431aa0, "struct MemoryStreamWriter_lists *__cdecl x()");
    set_name(0x431af0, "MemoryStream_lists::delete");
    SetType(0x431af0, "int __cdecl x(struct MemoryStream_lists *memstream)");
    set_name(0x431bc0, "MemoryStream_lists::get_size");
    SetType(0x431bc0, "DWORD __cdecl x(struct MemoryStream_lists *self)");
    set_name(0x431bd0, "MemoryStream_lists::read");
    SetType(0x431bd0, "BOOL __cdecl x(struct MemoryStream_lists *a1, unsigned int position, void *buffer, unsigned int size, unsigned int *size_read)");
    set_name(0x431d30, "MemoryStream_lists::new_with_datablock");
    SetType(0x431d30, "MemoryStream_lists *__cdecl x(void *data, size_t size)");
    set_name(0x431db0, "PfsReader::delete");
    SetType(0x431db0, "int __cdecl x(struct PfsReader *self)");
    set_name(0x431e20, "PfsReader::get_size_from_memstream_reader");
    SetType(0x431e20, "DWORD __cdecl x(struct PfsReader *a1)");
    set_name(0x431e60, "PfsReader::select_section_by_GUID");
    SetType(0x431e60, "int __cdecl x(struct PfsReader *self, const UUID *guid)");
    set_name(0x431f20, "PfsReader::iter_sections_begin");
    SetType(0x431f20, "int __cdecl x(struct PfsReader *self)");
    set_name(0x431fc0, "PfsReader::iter_sections_next");
    SetType(0x431fc0, "int __cdecl x(struct PfsReader *a1)");
    set_name(0x432070, "PfsReader::get_current_section_header");
    SetType(0x432070, "int __cdecl x(struct PfsReader *self, struct PFS_SECTION_HEADER *section_header)");
    set_name(0x4320d0, "PfsReader::as_section_reader");
    SetType(0x4320d0, "struct PfsReader_Interface *__cdecl x(PfsReader *self)");
    set_name(0x432100, "PfsReader::interface::initialize_to_read_part");
    set_name(0x432360, "PfsReader::interface::read");
    SetType(0x432360, "int __cdecl x(void *self, void *buffer, unsigned int size, unsigned int *size_read)");
    set_name(0x4323c0, "PfsReader::interface::force_stop");
    set_name(0x432430, "PfsReader::read_all_flash_payload");
    SetType(0x432430, "int __usercall x@<eax>(PfsReader_with_prelude *self@<ebx>, struct Reader_interface *reader)");
    set_name(0x4324a0, "compute_ZIP_CRC32_from_reader");
    SetType(0x4324a0, "unsigned int __usercall x@<eax>(unsigned int crc_initial_value@<ecx>, struct Reader_interface *reader@<esi>, void *temp_buffer, unsigned int temp_buffer_size)");
    set_name(0x4324e0, "PfsReader::interface::stop");
    SetType(0x4324e0, "struct PfsSection **__cdecl x(void *a1)");
    set_name(0x432530, "PfsReader::parse_section_headers");
    SetType(0x432530, "int __usercall x@<eax>(PfsReader_with_prelude *self@<ebx>)");
    set_name(0x432900, "PfsReader::load");
    SetType(0x432900, "int __cdecl x(struct PfsReader *self, struct Reader_interface *reader_interface, const char *unused)");
    set_name(0x432990, "PfsReader::new");
    SetType(0x432990, "struct PfsReader *__cdecl x(struct BufferManager *bufmgr)");
    set_name(0x432a50, "BufferManager::add_new_entry");
    SetType(0x432a50, "struct BufferBankEntry *__cdecl x(BufferManager_with_prelude *self, unsigned int phys_address_low32, unsigned int aligned_size, WORD wHandle)");
    set_name(0x432c00, "BufferManager::find_entry_from_allocated_address");
    SetType(0x432c00, "struct BufferBankEntry *__cdecl x(BufferManager_with_prelude *self, unsigned int address)");
    set_name(0x432c60, "BufferManager::free");
    SetType(0x432c60, "char __cdecl x(struct BufferManager *self, void *addr)");
    set_name(0x432cd0, "BufferManager::read");
    SetType(0x432cd0, "BYTE __cdecl x(struct BufferManager *self, void *buffer, unsigned int address, unsigned int offset, DWORD size)");
    set_name(0x432d50, "BufferManager::write");
    SetType(0x432d50, "BYTE __cdecl x(struct BufferManager *a1, DWORD address, unsigned int offset, const void *buffer, DWORD size)");
    set_name(0x432dd0, "BufferManager::find_entry_for_size");
    SetType(0x432dd0, "struct BufferBankEntry *__cdecl x(BufferManager_with_prelude *self, int requested_size, int align_on_page_or_u32, unsigned int *aligned_size)");
    set_name(0x432e70, "BufferManager::alloc_aligned");
    SetType(0x432e70, "void *__cdecl x(BufferManager *self, unsigned int size, int align_on_page_or_u32)");
    set_name(0x432f50, "BufferManager::new");
    SetType(0x432f50, "struct BufferManager *__cdecl x(DBUTIL_CONT_MEMORY_AFRW_HELPERS *pfcts)");
    set_name(0x433040, "init_pipe_stop__from_reader_to_writer_using_a_temp_buffer");
    SetType(0x433040, "int __cdecl x(struct Writer_interface *writer, const char *part_for_writer_initialize, struct Reader_interface *reader, const char *part_for_reader_initialize, void *temporary_buffer, unsigned int temporary_buffer_size)");
    set_name(0x4330d0, "loop_forever");
    set_name(0x4330e0, "parse_cmdline_into_argc_argv");
    SetType(0x4330e0, "bool __cdecl x(char *pszCmdLine, int a2, int *argc, char **argv)");
    set_name(0x433220, "LIST_HEADER::init");
    SetType(0x433220, "LIST_HEADER *__cdecl x(LIST_HEADER *self)");
    set_name(0x433230, "LIST_HEADER::concat");
    SetType(0x433230, "LIST_HEADER *__cdecl x(LIST_HEADER *self, LIST_HEADER *new_item)");
    set_name(0x433250, "LIST_ENTRY::unlink_item");
    SetType(0x433250, "LIST_ENTRY *__cdecl x(LIST_ENTRY *list)");
    set_name(0x433270, "read_phys_memory_into_new_buffer");
    SetType(0x433270, "void *__cdecl x(DWORD physical_mem, size_t size)");
    set_name(0x4332e0, "SmbiosTableReader::call_GetSystemFirmwareTable_RSMB_to_get_the_SMBIOS_fw_table_provider");
    SetType(0x4332e0, "bool __cdecl x(SmbiosTableReader_with_prelude *self)");
    set_name(0x433350, "SmbiosTableReader::scan_physmemory_for_SMBIOS_entry_point");
    SetType(0x433350, "char __cdecl x(SmbiosTableReader_with_prelude *self)");
    set_name(0x4334a0, "SmbiosTableReader::retrieve_SMBIOS_table");
    SetType(0x4334a0, "char __cdecl x(SmbiosTableReader_with_prelude *self)");
    set_name(0x4334c0, "compute_ZIP_CRC32_table");
    set_name(0x433500, "init__compute_ZIP_CRC32_table");
    SetType(0x433500, "_DWORD *__cdecl x(_DWORD *crc_value)");
    set_name(0x433530, "FlashPacketWriter::CRC32");
    SetType(0x433530, "void __cdecl x(unsigned int *crc_value, void *buffer, unsigned int size)");
    set_name(0x4335a0, "compute_ZIP_CRC32_from_initialized_reader");
    SetType(0x4335a0, "int __cdecl x(unsigned int *crc, struct Reader_interface *reader, void *temp_buffer, unsigned int temp_buffer_size)");
    set_name(0x433660, "pipe_data_from_reader_to_writer_using_a_temp_buffer");
    SetType(0x433660, "int __cdecl x(struct Writer_interface *writer, struct Reader_interface *reader, void *temporary_buffer, unsigned int temporary_buffer_size)");
    set_name(0x4336b0, "DBUtil_init");
    SetType(0x4336b0, "int __cdecl x(DBUTIL_FUNCTIONS **pFunctions, _DWORD *dbutil_arg4, _DWORD *dbutil_arg8)");
    set_name(0x433750, "DBUtil_disassociate");
    set_name(0x433780, "DBUtil__associate_with_driver_");
    set_name(0x433790, "DBUtil_port_in_u8");
    SetType(0x433790, "int __cdecl x(WORD port, _BYTE *value)");
    set_name(0x4337b0, "DBUtil_port_in_u16");
    SetType(0x4337b0, "int __cdecl x(__int16, void *)");
    set_name(0x4337d0, "DBUtil_port_in_u32");
    SetType(0x4337d0, "int __cdecl x(__int16, void *)");
    set_name(0x4337f0, "DBUtil_port_out_and_in_u8");
    SetType(0x4337f0, "int __cdecl x(__int16 otherport, unsigned __int8 value_otherout, __int16 port, void *value)");
    set_name(0x433820, "DBUtil_port_out_and_in_u16");
    SetType(0x433820, "int __cdecl x(WORD otherport, WORD value_otherout, WORD port, WORD *value)");
    set_name(0x433850, "DBUtil_port_out_and_in_u32");
    SetType(0x433850, "int __cdecl x(__int16, int, __int16, void *)");
    set_name(0x433880, "DBUtil_port_out_u8");
    SetType(0x433880, "int __cdecl x(WORD port, char value)");
    set_name(0x4338e0, "DBUtil_port_out_and_out_u8");
    SetType(0x4338e0, "int __cdecl x(WORD other_port, unsigned __int8 value_otherout, WORD port, char value)");
    set_name(0x433970, "DBUtil_read_phys_mem");
    SetType(0x433970, "int __cdecl x(QWORD physical_address, void *buffer, size_t size)");
    set_name(0x433990, "DBUtil_write_phys_mem");
    SetType(0x433990, "int __cdecl x(QWORD physical_address, void *buffer, size_t size)");
    set_name(0x4339b0, "DBUtil_do_DPC_io_port_out_u8");
    SetType(0x4339b0, "int __cdecl x(WORD port, unsigned __int8 a2, QWORD *rax, QWORD *rbx, QWORD *rcx, QWORD *rdx, QWORD *rsi, QWORD *rdi, int fRunInLoop)");
    set_name(0x4339f0, "DBUtil_do_DPC_io_port_out_u16");
    SetType(0x4339f0, "int __cdecl x(WORD port, unsigned __int16 value, QWORD *rax, QWORD *rbx, QWORD *rcx, QWORD *rdx, QWORD *rsi, QWORD *rdi, int fRunInLoop)");
    set_name(0x433a30, "DBUtil_do_DPC_io_port_out_u32");
    set_name(0x433a70, "DBUtil_do_DPC_SMI_0xb2");
    SetType(0x433a70, "int __cdecl x(unsigned __int8 value, QWORD *rax, QWORD *rbx, QWORD *rcx, QWORD *rdx, QWORD *rsi, QWORD *rdi)");
    set_name(0x433ab0, "DBUtil_allocate_contiguous_memory_and_test_write4");
    SetType(0x433ab0, "int __cdecl x(DWORD size, QWORD LowestAcceptableAddress, QWORD HighestAcceptableAddress, DWORD *contmem_handle, QWORD *physical_address)");
    set_name(0x433b20, "DBUtil_do_read_mem_from_contmem");
    SetType(0x433b20, "int __cdecl x(void *buffer, DWORD offset, size_t size, DWORD handle)");
    set_name(0x433b40, "DBUtil_do_write_mem_to_contmem");
    SetType(0x433b40, "int __cdecl x(DWORD handle, DWORD offset, size_t size, void *buffer)");
    set_name(0x433b60, "DBUtil_free_contiguous_memory_");
    SetType(0x433b60, "int __cdecl x(DWORD handle)");
    set_name(0x433b80, "DBUtil_do_write_mem_by_chunks_to_contmem");
    SetType(0x433b80, "int __cdecl x(DWORD handle, int offset, unsigned int size, void *buffer, unsigned int adjustment)");
    set_name(0x433c80, "unscramble_bytes");
    SetType(0x433c80, "void __cdecl x(_BYTE *data, unsigned int size)");
    set_name(0x433d00, "return_0_maybe_is_system_64bits");
    set_name(0x433d10, "call_IsWow64Process");
    SetType(0x433d10, "int __cdecl x()");
    set_name(0x433d70, "is_major_os_version_5");
    set_name(0x433de0, "extract_driver");
    SetType(0x433de0, "int __cdecl x(SC_HANDLE hSCManager, LPSTR pszTempDriverFile, DWORD ncchTempFileNameSize)");
    set_name(0x433f60, "load_driver");
    SetType(0x433f60, "int __cdecl x(SC_HANDLE hSCManager, LPCSTR lpBinaryPathName)");
    set_name(0x434050, "DBUtil_extract_and_load_driver");
    SetType(0x434050, "int __cdecl x()");
    set_name(0x434220, "DBUtil__ioctl");
    SetType(0x434220, "int __cdecl x(DBUTIL_IOCTL dwIoControlCode, LPVOID lpBuffer, DWORD nBufferSize)");
    set_name(0x4342d0, "DBUtil__ioctl_get_version");
    SetType(0x4342d0, "int __cdecl x(_DWORD *driver_version_major, _DWORD *driver_version_minor, _DWORD *driver_was_associated)");
    set_name(0x434360, "DBUtil__associate_with_driver");
    SetType(0x434360, "int __cdecl x()");
    set_name(0x434450, "_time64__");
    SetType(0x434450, "__time64_t __cdecl x(__time64_t *Time)");
    set_name(0x434470, "DBUtil_port_IO");
    SetType(0x434470, "int __cdecl x(WORD port_otherout, unsigned int value_otherout, WORD port, void *value, int fDoOtherOutPort, int fDoInput, size_t value_size)");
    set_name(0x4345b0, "DBUtil_RW_phys_mem");
    SetType(0x4345b0, "int __cdecl x(void *buffer, QWORD physical_address, size_t size, int fDoRead)");
    set_name(0x4346a0, "DBUtil_do_DPC_or_SMI");
    SetType(0x4346a0, "int __cdecl x(WORD port, int a2, unsigned __int8 size_of_value_to_port_out, int fDoSMI, int fRunInLoop, QWORD *rax, QWORD *rbx, QWORD *rcx, QWORD *rdx, QWORD *rsi, QWORD *rdi)");
    set_name(0x434a10, "DBUtil_allocate_contiguous_memory");
    SetType(0x434a10, "int __cdecl x(DWORD size, QWORD LowestAcceptableAddress, QWORD HighestAcceptableAddress, DWORD *contmem_handle, QWORD *physical_address)");
    set_name(0x434b10, "DBUtil_free_contiguous_memory");
    SetType(0x434b10, "int __cdecl x(DWORD handle)");
    set_name(0x434bd0, "DBUtil_do_RW_mem_from_contmem");
    SetType(0x434bd0, "int __cdecl x(DWORD handle, void *buffer, DWORD offset, size_t size, int fDoRead)");
    set_name(0x434d30, "get_allocated_contmem_by_handle");
    SetType(0x434d30, "struct USERLAND_TRACKING_OF_ALLOCATED_CONT_MEM *__cdecl x(DWORD handle)");
    set_name(0x434d70, "get_handle_for_allocated_contmem");
    SetType(0x434d70, "DWORD __cdecl x()");
    set_name(0x434db0, "record_allocated_contiguous_memory");
    SetType(0x434db0, "DWORD __cdecl x(QWORD virt_addr, DWORD size, QWORD phys_addr)");
    set_name(0x434e40, "get_allocated_contmem_attributes_by_handle");
    SetType(0x434e40, "int __cdecl x(DWORD handle, QWORD *virtual_address, DWORD *size, QWORD *physical_address)");
    set_name(0x434eb0, "unlink_allocated_contmem_attributes_by_handle");
    SetType(0x434eb0, "int __cdecl x(DWORD handle)");
    set_name(0x435580, "unknown_things_is_equals");
    set_name(0x435ac0, "?copy@?$char_traits@D@std@@SAPADPADPBDI@Z");
    SetType(0x435ac0, "int __cdecl x(void *, void *, size_t)");
    set_name(0x4381e0, "SMBIOS_table__get_next_offset");
    SetType(0x4381e0, "unsigned int __cdecl x()");
    set_name(0x438230, "set_g_SMBIOS_TABLE_to_this_type");
    SetType(0x438230, "int __cdecl x(unsigned __int8 type)");
    set_name(0x438320, "read_SMBIOS_TABLE_and_find_this_type");
    SetType(0x438320, "int __cdecl x(unsigned __int8 type)");
    set_name(0x4383c0, "verify_SMBIOS_header_checksum");
    SetType(0x4383c0, "BOOL __cdecl x(SMBIOSEntryPoint *a1)");
    set_name(0x438420, "get_SMBIOS_table_0xDA_from_GetSystemFirmwareTable");
    SetType(0x438420, "BOOL __cdecl x()");
    set_name(0x438590, "locate_SMBIOS_0xDA._table_by_scanning");
    SetType(0x438590, "__int16 __cdecl x()");
    set_name(0x438760, "call_action_through_ioport_from_SMBIOS_0xDA");
    SetType(0x438760, "BOOL __cdecl x(IO_PORT_ACTION_PARAMS_FROM_SBIOS_0xDA *io_action_parameters)");
    set_name(0x4388c0, "ZeroMemory_");
    SetType(0x4388c0, "unsigned int __cdecl x(void *buffer, unsigned int size)");
    set_name(0x4388f0, "fill_cont_memory_with_DSPA");
    SetType(0x4388f0, "unsigned int __cdecl x(DWORD handle, DWORD offset, unsigned int size)");
    set_name(0x4389b0, "get_SMBIOS_table_0xDA_with_several_ways");
    SetType(0x4389b0, "__int16 __cdecl x(DBUTIL_FUNCTIONS *pFunctions)");
    set_name(0x439370, "Decompressor_lib::decompress");
    set_name(0x43a950, "Decompressor_lib::destroy");
    set_name(0x43b818, "@__security_check_cookie@4");
    set_name(0x43b830, "_strncat");
    SetType(0x43b830, "char *__cdecl x(char *, const char *, size_t)");
    set_name(0x43b965, "get_stdio_streams");
    SetType(0x43b965, "FILE * x(void)");
    set_name(0x43b96b, "___initstdio");
    set_name(0x43ba1c, "___endstdio");
    set_name(0x43ba3c, "__lock_file");
    set_name(0x43ba7d, "__lock_file2");
    set_name(0x43baaf, "__unlock_file");
    set_name(0x43baeb, "__unlock_file2");
    set_name(0x43bb1a, "??0_LocaleUpdate@@QAE@PAUlocaleinfo_struct@@@Z");
    SetType(0x43bb1a, "_DWORD __thiscall x(_LocaleUpdate *this, struct localeinfo_struct *)");
    set_name(0x43bba1, "__tolower_l");
    SetType(0x43bba1, "int __cdecl x(int C, _locale_t Locale)");
    set_name(0x43bcb6, "_tolower");
    SetType(0x43bcb6, "int __cdecl x(int)");
    set_name(0x43bcf0, "_strncpy");
    SetType(0x43bcf0, "char *__cdecl x(char *, const char *, size_t)");
    set_name(0x43be14, "_fprintf");
    SetType(0x43be14, "int x(FILE *, const char *, ...)");
    set_name(0x43bf20, "_free");
    SetType(0x43bf20, "void __cdecl x(void *)");
    set_name(0x43bf5a, "_malloc");
    SetType(0x43bf5a, "void *__cdecl x(size_t)");
    set_name(0x43c000, "_strchr");
    SetType(0x43c000, "char *__cdecl x(const char *, int)");
    set_name(0x43c0be, "_sprintf");
    SetType(0x43c0be, "int x(char *, const char *, ...)");
    set_name(0x43c142, "__strnicmp_l");
    SetType(0x43c142, "int __cdecl x(const char *Str1, const char *Str2, size_t MaxCount, _locale_t Locale)");
    set_name(0x43c224, "__strnicmp");
    SetType(0x43c224, "int __cdecl x(const char *, const char *, size_t)");
    set_name(0x43c277, "__fsopen");
    SetType(0x43c277, "FILE *__cdecl x(const char *, const char *, int)");
    set_name(0x43c333, "_fopen");
    SetType(0x43c333, "FILE *__cdecl x(const char *, const char *)");
    set_name(0x43c34a, "_fopen_s");
    SetType(0x43c34a, "errno_t __cdecl x(FILE **File, const char *Filename, const char *Mode)");
    set_name(0x43c391, "_vfprintf_helper");
    SetType(0x43c391, "int __cdecl x(int, FILE *, int, int, int)");
    set_name(0x43c49c, "_vfprintf");
    SetType(0x43c49c, "int __cdecl x(FILE *, const char *, va_list)");
    set_name(0x43c4bb, "_puts");
    SetType(0x43c4bb, "int __cdecl x(const char *)");
    set_name(0x43c60a, "__fclose_nolock");
    SetType(0x43c60a, "int __cdecl x(FILE *File)");
    set_name(0x43c677, "_fclose");
    SetType(0x43c677, "int __cdecl x(FILE *)");
    set_name(0x43c6eb, "_fast_error_exit");
    set_name(0x43c714, "___tmainCRTStartup");
    set_name(0x43c881, "start");
    set_name(0x43c890, "_memset");
    SetType(0x43c890, "void *__cdecl x(void *, int, size_t)");
    set_name(0x43c910, "_memcpy");
    SetType(0x43c910, "void *__cdecl x(void *, const void *, size_t)");
    set_name(0x43cc71, "__ftell_nolock");
    SetType(0x43cc71, "int __cdecl x(FILE *File)");
    set_name(0x43ce05, "_ftell");
    SetType(0x43ce05, "int __cdecl x(FILE *)");
    set_name(0x43ce6a, "__fseek_nolock");
    SetType(0x43ce6a, "int __cdecl x(FILE *File, int Offset, int Origin)");
    set_name(0x43cef4, "_fseek");
    SetType(0x43cef4, "int __cdecl x(FILE *, int, int)");
    set_name(0x43cf70, "__fread_nolock_s");
    SetType(0x43cf70, "size_t __cdecl x(void *DstBuf, size_t DstSize, size_t ElementSize, size_t Count, FILE *File)");
    set_name(0x43d12c, "_fread_s");
    SetType(0x43d12c, "size_t __cdecl x(void *DstBuf, size_t DstSize, size_t ElementSize, size_t Count, FILE *File)");
    set_name(0x43d1ba, "_fread");
    SetType(0x43d1ba, "size_t __cdecl x(void *, size_t, size_t, FILE *)");
    set_name(0x43d226, "??2@YAPAXI@Z");
    SetType(0x43d226, "void *__cdecl x(size_t)");
    set_name(0x43d2b0, "__allshl");
    set_name(0x43d2d0, "__aullshr");
    set_name(0x43d2ef, "__fwrite_nolock");
    SetType(0x43d2ef, "size_t __cdecl x(const void *DstBuf, size_t Size, size_t Count, FILE *File)");
    set_name(0x43d446, "_fwrite");
    SetType(0x43d446, "size_t __cdecl x(const void *, size_t, size_t, FILE *)");
    set_name(0x43d4c0, "_strcat_s");
    SetType(0x43d4c0, "errno_t __cdecl x(char *Dst, rsize_t SizeInBytes, const char *Src)");
    set_name(0x43d52d, "_srand");
    SetType(0x43d52d, "void __cdecl x(unsigned int)");
    set_name(0x43d53f, "_rand");
    SetType(0x43d53f, "int __cdecl x()");
    set_name(0x43d560, "__time64");
    SetType(0x43d560, "__time64_t __cdecl x(__time64_t *Time)");
    set_name(0x43d5b1, "_strncmp");
    SetType(0x43d5b1, "int __cdecl x(const char *, const char *, size_t)");
    set_name(0x43d680, "_strlen");
    SetType(0x43d680, "size_t __cdecl x(const char *)");
    set_name(0x43d70b, "___report_gsfailure");
    set_name(0x43d811, "__ioinit");
    set_name(0x43da56, "__malloc_crt");
    SetType(0x43da56, "int __cdecl x(size_t)");
    set_name(0x43da9b, "__calloc_crt");
    set_name(0x43dae7, "__realloc_crt");
    SetType(0x43dae7, "int __cdecl x(void *, size_t)");
    set_name(0x43db35, "__fcloseall");
    SetType(0x43db35, "int __cdecl x()");
    set_name(0x43dbd1, "___crtCorExitProcess");
    set_name(0x43dbfc, "___crtExitProcess");
    SetType(0x43dbfc, "void __cdecl __noreturn x(UINT uExitCode)");
    set_name(0x43dc14, "__lockexit");
    set_name(0x43dc1d, "__unlockexit");
    set_name(0x43dc26, "__init_pointers");
    set_name(0x43dc59, "__initterm_e");
    set_name(0x43dc7d, "__cinit");
    set_name(0x43dd14, "_doexit");
    SetType(0x43dd14, "int __cdecl x(UINT uExitCode, int, int)");
    set_name(0x43de54, "_exit");
    SetType(0x43de54, "void __cdecl __noreturn x(int)");
    set_name(0x43de6a, "__exit");
    SetType(0x43de6a, "void __cdecl __noreturn x(int)");
    set_name(0x43de80, "__cexit");
    SetType(0x43de80, "void __cdecl x()");
    set_name(0x43de8f, "__c_exit");
    SetType(0x43de8f, "void __cdecl x()");
    set_name(0x43de9e, "__amsg_exit");
    set_name(0x43debc, "__flush");
    SetType(0x43debc, "int __cdecl x(FILE *)");
    set_name(0x43df24, "__fflush_nolock");
    SetType(0x43df24, "int __cdecl x(FILE *File)");
    set_name(0x43df6c, "_flsall");
    set_name(0x43e04f, "__mtinitlocks");
    set_name(0x43e099, "__mtdeletelocks");
    set_name(0x43e0f0, "__unlock");
    set_name(0x43e107, "__mtinitlocknum");
    set_name(0x43e1c9, "__lock");
    set_name(0x43e1fc, "_CPtoLCID");
    set_name(0x43e22b, "?setSBCS@@YAXPAUthreadmbcinfostruct@@@Z");
    SetType(0x43e22b, "void __cdecl x(struct threadmbcinfostruct *)");
    set_name(0x43e28f, "?setSBUpLow@@YAXPAUthreadmbcinfostruct@@@Z");
    SetType(0x43e28f, "void __cdecl x(struct threadmbcinfostruct *)");
    set_name(0x43e41f, "___updatetmbcinfo");
    set_name(0x43e4c3, "?getSystemCP@@YAHH@Z");
    SetType(0x43e4c3, "int __cdecl x(int)");
    set_name(0x43e53f, "__setmbcp_nolock");
    set_name(0x43e728, "__setmbcp");
    SetType(0x43e728, "int __cdecl x(int)");
    set_name(0x43e8c2, "___initmbctable");
    set_name(0x43e8e0, "___addlocaleref");
    SetType(0x43e8e0, "int __cdecl x(volatile LONG *lpAddend)");
    set_name(0x43e96f, "___removelocaleref");
    SetType(0x43e96f, "int __cdecl x(volatile LONG *lpAddend)");
    set_name(0x43ea08, "___freetlocinfo");
    SetType(0x43ea08, "int __cdecl x(void *)");
    set_name(0x43eb53, "__updatetlocinfoEx_nolock");
    SetType(0x43eb53, "int __cdecl x(int, volatile LONG *lpAddend)");
    set_name(0x43eba0, "___updatetlocinfo");
    set_name(0x43ec19, "__encoded_null");
    set_name(0x43ec22, "___crtTlsAlloc@4");
    set_name(0x43ec2b, "___set_flsgetvalue");
    set_name(0x43ec5f, "__mtterm");
    set_name(0x43ec9c, "__initptd");
    set_name(0x43ed50, "__getptd_noexit");
    set_name(0x43edc9, "__getptd");
    set_name(0x43ede3, "__freefls@4");
    SetType(0x43ede3, "int __stdcall x(void *)");
    set_name(0x43ef13, "__mtinit");
    set_name(0x43f08e, "__freea");
    SetType(0x43f08e, "void __cdecl x(void *Memory)");
    set_name(0x43f0ae, "?__crtLCMapStringA_stat@@YAHPAUlocaleinfo_struct@@KKPBDHPADHHH@Z");
    SetType(0x43f0ae, "int __cdecl x(struct localeinfo_struct *, LCID Locale, DWORD dwMapFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpDestStr, int cchDest, UINT CodePage, int)");
    set_name(0x43f295, "___crtLCMapStringA");
    SetType(0x43f295, "int __cdecl x(struct localeinfo_struct *, LCID Locale, DWORD dwMapFlags, LPCSTR lpMultiByteStr, int cbMultiByte, LPWSTR lpDestStr, int cchDest, UINT CodePage, int)");
    set_name(0x43f2db, "__get_errno_from_oserr");
    set_name(0x43f31d, "__errno");
    SetType(0x43f31d, "int *__cdecl x()");
    set_name(0x43f330, "___doserrno");
    SetType(0x43f330, "unsigned int *__cdecl x()");
    set_name(0x43f343, "__dosmaperr");
    set_name(0x43f366, "__isleadbyte_l");
    SetType(0x43f366, "int __cdecl x(int C, _locale_t Locale)");
    set_name(0x43f39e, "_isleadbyte");
    SetType(0x43f39e, "int __cdecl x(int)");
    set_name(0x43f3b1, "__isctype_l");
    SetType(0x43f3b1, "int __cdecl x(int C, int Type, _locale_t Locale)");
    set_name(0x43f469, "__stbuf");
    SetType(0x43f469, "int __cdecl x(FILE *)");
    set_name(0x43f505, "__ftbuf");
    SetType(0x43f505, "int __cdecl x(int, FILE *)");
    set_name(0x43f539, "_write_char");
    SetType(0x43f539, "int __thiscall x(FILE *)");
    set_name(0x43f56c, "_write_string");
    set_name(0x43f5b9, "__output_l");
    SetType(0x43f5b9, "int __cdecl x(FILE *, int, struct localeinfo_struct *, int)");
    set_name(0x440165, "__fileno");
    SetType(0x440165, "int __cdecl x(FILE *)");
    set_name(0x44019a, "__call_reportfault");
    set_name(0x4402c3, "__invoke_watson");
    set_name(0x4402e8, "__invalid_parameter");
    set_name(0x440315, "__invalid_parameter_noinfo");
    set_name(0x440330, "__SEH_prolog4");
    set_name(0x440375, "__SEH_epilog4");
    set_name(0x440390, "SEH_443170");
    SetType(0x440390, "int __cdecl x(PEXCEPTION_RECORD ExceptionRecord, PVOID TargetFrame, int)");
    set_name(0x44051f, "__heap_init");
    set_name(0x44053d, "__GET_RTERRMSG");
    set_name(0x440563, "__NMSG_WRITE");
    set_name(0x440712, "__FF_MSGBANNER");
    set_name(0x44075a, "__callnewh");
    set_name(0x440782, "__flsbuf");
    SetType(0x440782, "int __cdecl x(int, FILE *)");
    set_name(0x4408f0, "___ascii_strnicmp");
    set_name(0x440951, "__openfile");
    set_name(0x440be8, "__getstream");
    set_name(0x440d20, "__local_unwind4");
    set_name(0x440db0, "__unwind_handler4");
    set_name(0x440df6, "__seh_longjmp_unwind4@4");
    set_name(0x440e12, "@_EH4_CallFilterFunc@8");
    set_name(0x440e29, "@_EH4_TransferToHandler@8");
    set_name(0x440e42, "@_EH4_GlobalUnwind2@8");
    SetType(0x440e42, "int __fastcall x(PVOID TargetFrame, PEXCEPTION_RECORD ExceptionRecord)");
    set_name(0x440e5b, "@_EH4_LocalUnwind@16");
    set_name(0x440e72, "__close_nolock");
    set_name(0x440f0e, "__close");
    SetType(0x440f0e, "int __cdecl x(int)");
    set_name(0x440fd2, "__freebuf");
    set_name(0x441003, "?__CxxUnhandledExceptionFilter@@YGJPAU_EXCEPTION_POINTERS@@@Z");
    SetType(0x441003, "LONG __stdcall x(struct _EXCEPTION_POINTERS *ExceptionInfo)");
    set_name(0x441053, "__XcptFilter");
    set_name(0x44119d, "__wincmdln");
    set_name(0x4411fc, "__setenvp");
    set_name(0x4412d8, "_parse_cmdline");
    set_name(0x441472, "__setargv");
    set_name(0x44152d, "___crtGetEnvironmentStringsA");
    set_name(0x441610, "___security_init_cookie");
    set_name(0x441878, "__lseek_nolock");
    SetType(0x441878, "int __cdecl x(int, LONG lDistanceToMove, DWORD dwMoveMethod)");
    set_name(0x4418ed, "__lseek");
    SetType(0x4418ed, "int __cdecl x(int, int, int)");
    set_name(0x4419c1, "__filbuf");
    SetType(0x4419c1, "int __cdecl x(FILE *)");
    set_name(0x441ae3, "__read_nolock");
    SetType(0x441ae3, "int __cdecl x(int, LPVOID lpBuffer, DWORD nNumberOfBytesToRead)");
    set_name(0x44209a, "__read");
    SetType(0x44209a, "int __cdecl x(int, void *, unsigned int)");
    set_name(0x442190, "_memcpy_s");
    SetType(0x442190, "errno_t __cdecl x(void *Dst, rsize_t DstSize, const void *Src, rsize_t MaxCount)");
    set_name(0x442205, "??0exception@std@@QAE@ABQBDH@Z");
    SetType(0x442205, "_DWORD __thiscall x(std::exception *this, const char *const *, int)");
    set_name(0x442222, "?what@exception@@UBEPBDXZ");
    SetType(0x442222, "const char *__thiscall x(exception *__hidden this)");
    set_name(0x44222f, "?_Copy_str@exception@std@@AAEXPBD@Z");
    SetType(0x44222f, "void __thiscall x(std::exception *this, const char *)");
    set_name(0x44226f, "?_Tidy@exception@std@@AAEXXZ");
    SetType(0x44226f, "void __thiscall x(std::exception *__hidden this)");
    set_name(0x44228d, "??4exception@std@@QAEAAV01@ABV01@@Z");
    SetType(0x44228d, "int __thiscall x(std::exception *this, int)");
    set_name(0x4422f4, "??0exception@std@@QAE@ABV01@@Z");
    SetType(0x4422f4, "_DWORD __thiscall x(std::exception *this, const struct exception *)");
    set_name(0x44234a, "??3@YAXPAX@Z");
    SetType(0x44234a, "void __cdecl x(void *)");
    set_name(0x442355, "__onexit_nolock");
    SetType(0x442355, "int __cdecl x(PVOID Ptr)");
    set_name(0x44243c, "__onexit");
    SetType(0x44243c, "_onexit_t __cdecl x(_onexit_t)");
    set_name(0x442478, "_atexit");
    SetType(0x442478, "int __cdecl x(void (__cdecl *)())");
    set_name(0x44248f, "__CxxThrowException@8");
    set_name(0x4424db, "__write_nolock");
    SetType(0x4424db, "int __cdecl x(int, int, DWORD nNumberOfBytesToWrite)");
    set_name(0x442bd8, "__write");
    SetType(0x442bd8, "int __cdecl x(int, const void *, unsigned int)");
    set_name(0x442cb0, "__aulldiv");
    set_name(0x442d20, "__calloc_impl");
    set_name(0x442da2, "_realloc");
    SetType(0x442da2, "void *__cdecl x(void *, size_t)");
    set_name(0x442e4f, "?terminate@@YAXXZ");
    SetType(0x442e4f, "void __cdecl __noreturn x()");
    set_name(0x442e88, "__initp_eh_hooks");
    set_name(0x442e99, "__initp_misc_winsig");
    set_name(0x442eb7, "_siglookup");
    set_name(0x442efb, "_raise");
    SetType(0x442efb, "int __cdecl x(int)");
    set_name(0x4430bc, "__initp_misc_cfltcvt_tab");
    set_name(0x4430e0, "__ValidateImageBase");
    set_name(0x443120, "__FindPESection");
    set_name(0x443170, "__IsNonwritableInCurrentImage");
    set_name(0x44322c, "__commit");
    SetType(0x44322c, "int __cdecl x(int)");
    set_name(0x443305, "?__crtGetStringTypeA_stat@@YAHPAUlocaleinfo_struct@@KPBDHPAGHHH@Z");
    SetType(0x443305, "int __cdecl x(struct localeinfo_struct *, DWORD dwInfoType, LPCSTR lpMultiByteStr, int cbMultiByte, LPWORD lpCharType, UINT CodePage, int, int)");
    set_name(0x4433ec, "___crtGetStringTypeA");
    SetType(0x4433ec, "int __cdecl x(struct localeinfo_struct *, DWORD dwInfoType, LPCSTR lpMultiByteStr, int cbMultiByte, LPWORD lpCharType, UINT CodePage, int, int)");
    set_name(0x44342c, "___free_lc_time");
    set_name(0x4437a3, "___free_lconv_num");
    set_name(0x44380c, "___free_lconv_mon");
    set_name(0x443910, "__alloca_probe_16");
    set_name(0x443926, "__alloca_probe_8");
    set_name(0x443940, "_strcspn");
    SetType(0x443940, "size_t __cdecl x(const char *, const char *)");
    set_name(0x443986, "_strcpy_s");
    SetType(0x443986, "errno_t __cdecl x(char *Dst, rsize_t SizeInBytes, const char *Src)");
    set_name(0x4439f0, "_strcmp");
    SetType(0x4439f0, "int __cdecl x(const char *, const char *)");
    set_name(0x443a80, "_strpbrk");
    SetType(0x443a80, "char *__cdecl x(const char *, const char *)");
    set_name(0x443ac0, "__isatty");
    SetType(0x443ac0, "int __cdecl x(int)");
    set_name(0x443b16, "__get_printf_count_output");
    SetType(0x443b16, "int __cdecl x()");
    set_name(0x443b2c, "__wctomb_s_l");
    SetType(0x443b2c, "errno_t __cdecl x(int *SizeConverted, char *MbCh, size_t SizeInBytes, wchar_t WCh, _locale_t Locale)");
    set_name(0x443c81, "_wctomb_s");
    SetType(0x443c81, "errno_t __cdecl x(int *SizeConverted, char *MbCh, rsize_t SizeInBytes, wchar_t WCh)");
    set_name(0x443ca0, "__aulldvrm");
    set_name(0x443ea1, "_wcscat_s");
    SetType(0x443ea1, "errno_t __cdecl x(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src)");
    set_name(0x443f16, "_wcsncpy_s");
    SetType(0x443f16, "errno_t __cdecl x(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src, rsize_t MaxCount)");
    set_name(0x443fe3, "_wcslen");
    SetType(0x443fe3, "size_t __cdecl x(const wchar_t *)");
    set_name(0x443ffe, "_wcscpy_s");
    SetType(0x443ffe, "errno_t __cdecl x(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src)");
    set_name(0x444061, "__set_error_mode");
    SetType(0x444061, "int __cdecl x(int)");
    set_name(0x4440a0, "__lseeki64_nolock");
    SetType(0x4440a0, "int __cdecl x(int, int, int, DWORD dwMoveMethod)");
    set_name(0x444125, "__lseeki64");
    SetType(0x444125, "__int64 __cdecl x(int, __int64, int)");
    set_name(0x44420f, "__getbuf");
    set_name(0x444258, "__tsopen_nolock");
    SetType(0x444258, "int __cdecl x(int, LPCSTR lpFileName, int, int, int)");
    set_name(0x44498c, "__sopen_helper");
    SetType(0x44498c, "int __cdecl x(LPCSTR lpFileName, int, int, int, int, int)");
    set_name(0x444a50, "__sopen_s");
    SetType(0x444a50, "int __cdecl x(int, LPCSTR lpFileName, int, int, int)");
    set_name(0x444a70, "__mbsnbicmp_l");
    SetType(0x444a70, "int __cdecl x(char *, char *, size_t, struct localeinfo_struct *)");
    set_name(0x444c74, "__mbsnbicmp");
    SetType(0x444c74, "int __cdecl x(const unsigned __int8 *, const unsigned __int8 *, size_t)");
    set_name(0x444c8e, "__mbsnbcmp_l");
    SetType(0x444c8e, "int __cdecl x(char *, char *, size_t, struct localeinfo_struct *)");
    set_name(0x444dda, "__mbsnbcmp");
    SetType(0x444dda, "int __cdecl x(const unsigned __int8 *, const unsigned __int8 *, size_t)");
    set_name(0x444e00, "__global_unwind2");
    SetType(0x444e00, "int __cdecl x(PVOID TargetFrame)");
    set_name(0x444e20, "__unwind_handler");
    set_name(0x444e65, "__local_unwind2");
    set_name(0x444ee9, "__abnormal_termination");
    SetType(0x444ee9, "int __cdecl x()");
    set_name(0x444f0b, "_at_done");
    set_name(0x444f0c, "__NLG_Notify1");
    set_name(0x444f15, "__NLG_Notify");
    set_name(0x444f34, "__NLG_Call");
    set_name(0x444f37, "__set_osfhnd");
    SetType(0x444f37, "int __cdecl x(int, HANDLE hHandle)");
    set_name(0x444fb8, "__free_osfhnd");
    set_name(0x44503e, "__get_osfhandle");
    SetType(0x44503e, "int __cdecl x(int)");
    set_name(0x4450a7, "___lock_fhandle");
    set_name(0x445146, "__unlock_fhandle");
    set_name(0x44516d, "__alloc_osfhnd");
    set_name(0x445306, "?x_ismbbtype_l@@YAHPAUlocaleinfo_struct@@IHH@Z");
    SetType(0x445306, "int __cdecl x(struct localeinfo_struct *, char, int, char)");
    set_name(0x445359, "__ismbblead");
    SetType(0x445359, "int __cdecl x(unsigned int)");
    set_name(0x445371, "?_Type_info_dtor@type_info@@CAXPAV1@@Z");
    SetType(0x445371, "void __cdecl x(struct type_info *)");
    set_name(0x4453e1, "__msize");
    SetType(0x4453e1, "size_t __cdecl x(void *)");
    set_name(0x445414, "__putwch_nolock");
    SetType(0x445414, "int __cdecl x(__int16 Buffer)");
    set_name(0x445456, "__mbtowc_l");
    SetType(0x445456, "int __cdecl x(wchar_t *DstCh, const char *SrcCh, size_t SrcSizeInBytes, _locale_t Locale)");
    set_name(0x44556c, "_mbtowc");
    SetType(0x44556c, "int __cdecl x(wchar_t *, const char *, size_t)");
    set_name(0x445590, "__alloca_probe");
    set_name(0x4455bb, "_abort");
    SetType(0x4455bb, "void __cdecl __noreturn x()");
    set_name(0x4455ee, "__fptrap");
    set_name(0x4455f7, "__chsize_nolock");
    set_name(0x4457ad, "__setmode_nolock");
    set_name(0x445895, "___initconout");
    set_name(0x4458d0, "__allmul");
    set_name(0x445904, "RtlUnwind");
    SetType(0x445904, "void __stdcall x(PVOID TargetFrame, PVOID TargetIp, PEXCEPTION_RECORD ExceptionRecord, PVOID ReturnValue)");
    print("Import OK :)");
    return 0;
}
